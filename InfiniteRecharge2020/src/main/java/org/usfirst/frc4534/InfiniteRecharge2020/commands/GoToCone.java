// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4534.InfiniteRecharge2020.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4534.InfiniteRecharge2020.Robot;
import java.math.*;

/**
 *
 */
public class GoToCone extends Command {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    double angle = 0;
    double size = 0;
    boolean followOffscreen;
    double lastKnownPosition;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public GoToCone(boolean followOffscreenT) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        followOffscreen = followOffscreenT;
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        //Switch to cone grip pipeline
        Robot.limelight.setPipeline(1);
        //Disable driving
        Robot.driveTrain.allowDrive(false);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        //Get angle of crosshair relative to forward, and width in pixels of the yellow bounding box
        angle = Robot.limelight.getXSkew();
        size = Robot.limelight.getYellowBoxHorizontal();
        float speed = 0;
        float rotation = 0;
        //If angle is high, turn right at propprtional speed
        if (angle > 1) {
            rotation = (float)(angle/22.5 * 0.2 + 0.35);
        }
        //If angle is low, turn left at proportional speed
        else if (angle < -1) {
            rotation = (float)(angle/22.5 * 0.2 - 0.35);
        }
        //If the size is less than 120, move closer.
        if (size < 100000) {
            speed = (float)0.6;
        }
        //Go to cone if it is there
        if(Robot.limelight.limelightHasTarget()) {
            Robot.driveTrain.ArcadeDrive(-speed, -rotation);
        }
        //if the cone isnt there, but we are in follow offscreen mode, 
        //and the cone was most recently at an angle near the edge, turn in that direction without moving forward.
        if(followOffscreen) {
            if(lastKnownPosition < -15 && !Robot.limelight.limelightHasTarget()) Robot.driveTrain.ArcadeDrive(0, 0.5);
            if(lastKnownPosition > 15 && !Robot.limelight.limelightHasTarget()) Robot.driveTrain.ArcadeDrive(0, -0.5);
            //Track last known angle
            if (Robot.limelight.limelightHasTarget()) lastKnownPosition = angle;
        }
        
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return size > 10000;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.driveTrain.TankDrive(0,0);
        Robot.driveTrain.allowDrive(true);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.driveTrain.TankDrive(0,0);
        Robot.driveTrain.allowDrive(true);
    }
}