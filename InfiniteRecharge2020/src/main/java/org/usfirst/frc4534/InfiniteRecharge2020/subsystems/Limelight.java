// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4534.InfiniteRecharge2020.subsystems;


import org.usfirst.frc4534.InfiniteRecharge2020.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;

import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.networktables.NetworkTableEntry;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Limelight extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Limelight() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    protected NetworkTable limeTable = NetworkTableInstance.getDefault().getTable("limelight");
    
    //Has target
    protected NetworkTableEntry tv = limeTable.getEntry("tv");
    //Horizontal Offset
    protected NetworkTableEntry tx = limeTable.getEntry("tx");
    //Vertical Offset
    protected NetworkTableEntry ty = limeTable.getEntry("ty");
    //Amount of 
    protected NetworkTableEntry ta = limeTable.getEntry("ta");
    //Skew
    protected NetworkTableEntry ts = limeTable.getEntry("ts");
    //Latency
    protected NetworkTableEntry tl = limeTable.getEntry("tl");
    //Short side of blue box
    protected NetworkTableEntry tshort = limeTable.getEntry("tshort");
    //Long side of blue box
    protected NetworkTableEntry tlong = limeTable.getEntry("tlong");
    //Horizontal of yellow box
    protected NetworkTableEntry thor = limeTable.getEntry("thor");
    //Vertical of yellow box
    protected NetworkTableEntry tvert = limeTable.getEntry("tvert");

    public void setLEDMode(double mode) {
        if (mode == 0 && getLEDMode() != 0) {
            limeTable.getEntry("ledMode").setNumber(0);
        } else if (mode == 1 && getLEDMode() != 1) {
            limeTable.getEntry("ledMode").setNumber(1);
        } else if (mode == 2 && getLEDMode() != 2) {
            limeTable.getEntry("ledMode").setNumber(2);
        } else if (mode == 3 && getLEDMode() != 3) {
            limeTable.getEntry("ledMode").setNumber(3);
        }
    }

    public double getLEDMode() {
		final double LEDMode = limeTable.getEntry("ledMode").getDouble(1);
		return LEDMode;
    }
    /*private void debugLimeLED() {
        System.out.println(limeTable.getEntry("ledMode").getDouble(1));
    }*/
    public double getXSkew() {
        return tx.getDouble(0);
    }
    public double getYSkew() {
        return ty.getDouble(0);
    }
    public boolean limelightHasTarget() {
        if(tv.getDouble(0) == 1.0) return true;
        else return false;
    }
    public double getAreaPercent() {
        return ta.getDouble(0);
    }
    public double getArea() {
        return (ta.getDouble(0) / 100) * 76800;
    }
    public double getLatency() {
        return tl.getDouble(0);
    }
    public double getBlueBoxLong() {
        return tlong.getDouble(0);
    }
    public double getBlueBoxShort() {
        return tshort.getDouble(0);
    }
    public double getYellowBoxHorizontal() {
        return thor.getDouble(0);
    }
    public double getYellowBoxVertical() {
        return tvert.getDouble(0);
    }
    public void setPipeline(int pipeline) {
        limeTable.getEntry("pipeline").setNumber(pipeline);
    }
}