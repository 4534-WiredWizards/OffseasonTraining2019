// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4534.InfiniteRecharge2020.subsystems;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import org.usfirst.frc4534.InfiniteRecharge2020.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax leftMaster;
    private CANSparkMax rightMaster;
    private CANSparkMax leftFollower;
    private CANSparkMax rightFollower;
    private DifferentialDrive diffDrive;
    private Solenoid leftShifter;
    private Solenoid rightShifter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Demo Code and Accel/Decel Variables
    double workingSpeed = 1;
    double demoSpeed = 0.5;
    // Change motor speed by this variable every loop (typically 20ms)
    double stepSize = 0.1;
    boolean demoMode = false;
    double maxSpeed = workingSpeed;
    double lastSpeed = 0;

    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftMaster = new CANSparkMax(0, MotorType.kBrushless);
        leftMaster.setInverted(false);

        rightMaster = new CANSparkMax(1, MotorType.kBrushless);
        rightMaster.setInverted(false);

        leftFollower = new CANSparkMax(2, MotorType.kBrushless);
        leftFollower.setInverted(false);

        rightFollower = new CANSparkMax(3, MotorType.kBrushless);
        rightFollower.setInverted(false);

        leftFollower.follow(leftMaster);
        rightFollower.follow(rightMaster);

        diffDrive = new DifferentialDrive(leftMaster, rightMaster);
        addChild("DiffDrive", diffDrive);
        diffDrive.setSafetyEnabled(true);
        diffDrive.setExpiration(0.1);
        diffDrive.setMaxOutput(1.0);

        leftShifter = new Solenoid(0, 0);
        addChild("LeftShifter", leftShifter);

        rightShifter = new Solenoid(0, 1);
        addChild("RightShifter", rightShifter);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void ArcadeDrive(double speed, double rotation) {
        double newSpeed = scaleSpeed(speed) * maxSpeed;
        diffDrive.arcadeDrive(newSpeed, rotation, true);
        lastSpeed = newSpeed;
    }

    public void TankDrive(double leftSpeed, double rightSpeed) {
        diffDrive.tankDrive(leftSpeed, rightSpeed);
    }

    public void SetShifter(boolean state) {
        leftShifter.set(state);
        rightShifter.set(state);
    }

    public void setDemoMode(boolean newDemoMode) {
        if (!(leftMaster.get() == 0 && rightMaster.get() == 0))
            return;
        demoMode = newDemoMode;
        if (demoMode) {
            maxSpeed = demoSpeed;
        } else {
            maxSpeed = workingSpeed;
        }
        return;
    }

    public void ToggleShifter() {
        leftShifter.set(!(leftShifter.get() && rightShifter.get()));
        rightShifter.set(!(leftShifter.get() && rightShifter.get()));
    }
    private double scaleSpeed(double speed) {
        /*if (Math.abs(speed) <= minSpeed && Math.abs(lastSpeed) <= minSpeed) {
            return 0;
    } else*/ if (speed > lastSpeed) {
            if (Math.abs(speed - lastSpeed) < stepSize) {
                return speed;
            } else {
                return lastSpeed + stepSize;
            }
        } else if (speed < lastSpeed) {
            if (Math.abs(speed - lastSpeed) < stepSize) {
                return speed;
            } else {
                return lastSpeed - stepSize;
            }
        }
        return 0;
    }
}
