// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4534.InfiniteRecharge2020.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4534.InfiniteRecharge2020.Robot;
import java.math.*;

public class DriveWithJoystick extends Command {
    protected double innerBound = 0.05;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveWithJoystick() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double speed;
        double rotation;
        //Get joystick positions and set speed and rotation to them
        //Inputs below the inner bound are ignored
        speed = Math.abs(Robot.oi.getJoystick1().getRawAxis(1)) >= innerBound ? Robot.oi.getJoystick1().getRawAxis(1) : 0;
        rotation = Math.abs(Robot.oi.getJoystick1().getRawAxis(4)) >= innerBound ? -Robot.oi.getJoystick1().getRawAxis(4) : 0;
        //Go into slow speed mode if left bumper is pressed, slow rotation mode if right bumper is pressed
        speed = Robot.oi.leftBumper1.get() ? speed * 0.5 : speed;
        rotation = Robot.oi.rightBumper1.get() ? rotation * 0.5 : rotation;
        //Descrease speed to 0.85 normal speed, add extra 0.15 from left trigger.
        if (speed < 0) speed = speed * 0.85 - 0.15 * Robot.oi.joystick1.getRawAxis(2);
        else speed = speed * 0.85 + 0.15 * Robot.oi.joystick1.getRawAxis(2);
        //Only move if allowed to.
        if (Robot.driveTrain.isDrivingAllowed() == true) {
            Robot.driveTrain.ArcadeDrive(speed, rotation);
            Robot.driveTrain.SetShifter(Robot.oi.leftJoystick1.get());
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.driveTrain.TankDrive(0,0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.driveTrain.TankDrive(0,0);
    }
}
